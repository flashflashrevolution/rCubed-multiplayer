/*
* SmartFoxServer PRO
* Simple Scheduler Example
* v 1.0.0
* 
* (c) 2007 gotoAndPlay()
*
*/

// We import the correct java package
var _scheduler = Packages.it.gotoandplay.smartfoxserver.util.scheduling

// Global variable
var scheduler = null

/*
*
* The example shows how to use the Java Scheduler in Actionscript code
*
* A Scheduler object can run any number of timed tasks without the need to create
* multiple setIntervals or java Threads. This optimizes the usage of the resources and
* simplifies the code.
*
* For further details about the Scheduler class please consult the javadoc in our
* documentation.
*
*/
function init()
{
	trace(">>>>> Scheduler Test running ...")
	
	/*
	* Create a new instance of the Scheduler
	* NOTE: you only need one instance of the Scheduler per application
	*/
	var scheduler = new _scheduler.Scheduler()
	
	// Start the scheduler
	scheduler.startService()
	
	/*
	* The Task object describes the task to be executed
	* You can pass any object in the constructor, containing any custom parameters
	*/
	var task1 = new _scheduler.Task( {name:"have breakfast"} )
	var task2 = new _scheduler.Task( {name:"play videogames"} )
	var task3 = new _scheduler.Task( {name:"work a bit", start:"14:00", end:"17:00"} )
	
	/*
	* This is the object that handles the call-backs generated by the Scheduler
	* when it's time to execute the task.
	*
	* The object must implement a method called doTask which receives a Task object
	* as the argument.
	*/
	var handlerObj = {}
	handlerObj.count = 0
	handlerObj.doTask = function(task)
	{
		trace("Executing task: " + task.id.name)
		
		if (task.id.name == "play videogames")
		{
			this.count++
			trace("count = " + this.count)
			
			if (this.count == 2)
			{
				task.active = false
				trace("End of loop")
			}
		}
		
		else if (task.id.name == "work a bit")
		{
			trace("Start at: " + task.id.start + ", End at: " + task.id.end)
		}
	}
	
	// We create the call-back handler
	var taskHandler = new _scheduler.ITaskHandler( handlerObj )
	
	/*
	* Here we add the tasks to the scheduler
	* specifiying the delay interval (2nd param) in seconds
	* if the task loops (3rd param)
	* and the call-back handler (4th param)
	*/
	scheduler.addScheduledTask(task1, 3, false, taskHandler)
	scheduler.addScheduledTask(task2, 5, true, taskHandler)
	scheduler.addScheduledTask(task3, 4, false, taskHandler)
}


/*
* This method is called by the server when an extension
* is being removed / destroyed.
* 
* Always make sure to release resources like setInterval(s)
* open files etc in this method.
* 
* In this case we delete the reference to the databaseManager
*/
function destroy()
{
	trace(">>>>> Scheduler Stopping ...")
	
	// This method should always be called to shut down the Scheduler
	scheduler.destroy()
}



/*
* 
* Handle Client Requests
* 
* cmd 		= a string with the client command to execute 
* params 	= list of parameters expected from the client
* user 		= the User object representing the sender
* fromRoom 	= the id of the room where the request was generated
* 
*/
function handleRequest(cmd, params, user, fromRoom)
{
 	//
}


/*
* This method handles internal events
* Internal events are dispactched by the Zone or Room where the extension is attached to
* 
* the (evt) object
*/
function handleInternalEvent(evt)
{
	//	
}

function handleInternalRequest( params )
{
	//
}

