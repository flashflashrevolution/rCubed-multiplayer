<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>SmartFoxServer Documentation</title>
<script language="javascript" src="../../lib.js"></script>
<link href="../../main.css" rel="stylesheet" type="text/css">
</head>

<body class="bodyStyle">
 	<p class="title"><span class="subTitle"><a name="top" id="93"></a></span>6.x Java Extensions CookBook </p>
	<p>
		This document provides quick snippets of code organized by theme that will get you started with most of the
		server side coding tasks. Feel free to suggest more "<em>recipes</em>" by sending us an email or posting in our <a href="http://www.smartfoxserver.com/forums" target="_blank">support forums</a></a>
	</p>

<p class="subTitle">&raquo; Using String/Raw protocol</p>
<p>
	The String/Raw protocol allows you to send data in very small packets, with a configurable character separator (default: %). The difference with XML and JSON formats is that you can no longer pass
	nested objects with key-value pairs, but only a sequence of strings that can be retrieved on the other side in the same order in which the have been created.
</p>
<p>To give you an idea this is a very obvious example:</p>
<pre class="codeBlockClient">
%Hello%World%this%is%a%test%
</pre>
<p>
	You will be able to get the first element (&quot;Hello&quot;) at index 0, the next one (&quot;World&quot;) at index 1 etc... just like you would do in a zero-based indexed array.
</p>
<p class="buttonTitle"><strong>Recipe #1:</strong></p>
<p>The client sends an object containing a string and a number. The <em>sfs</em> object is a instance of the SmartFoxClient class and the three parmeters passed to the <em>sendXtMessage()</em> method are: the name of the extension, the <em>&quot;command&quot;</em> name and the parameters object.</p>
<pre class="codeBlockClient">
var arr:Array = []
arr.push("Hello World!")
arr.push(54321)

sfs.sendXtMessage("test", "cmd", arr, "str")
</pre>
<p>Note that the in the sendXtMessage() 4th argument we have specifed the protocol type. On the server side you will receive a String array: </p>
		
<pre class="codeBlockServer">
public void handleRequest(String cmd, String[] params, User u, int fromRoom)
{
	String helloWorld = params[0];
	int num = Integer.parseInt(params[1]);
}
</pre>

<!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	
<p class="buttonTitle"><strong>Recipe #2:</strong></p>
<p>
	By following the ActionscriptObject/JSONObject examples we should be able to create a  more complex test with nested objects.
	However, as we said in the introduction, the string/raw protocol doesn't allow nested objects in the same fashion that the other protocols do.
	We are only allowed to pass primitive data, that is converted into Strings separated by a specific token.
</p>
<p>To solve this issue we can still use multiple separators to send nested data. Take a look at the following example:</p>

<pre class="codeBlockClient">
var arr:Array = []
obj.push("Hello World!")
obj.push(54321)
obj.push("1,2,3,4,5") // numbers are comma separated

sfs.sendXtMessage("test", "cmd", arr, "str")
</pre>

<p>Here&#x27;s the server side code:</p>
<pre class="codeBlockServer">
public void handleRequest(String cmd, String[] params, User u, int fromRoom)
{
	String str = params[0];
	int num = Integer.parseInt(params[1]);
	String[] arr = params[2].split("\\,");

	// Cycle through all items
	for (int i = 0; i &lt; arr.length; i++)
	{
		System.out.println("Item " + i + " = " + arr[i]);
	}
}
</pre>
<p>Please note that we have call the <strong>split()</strong> method on the third parameter sent by the client ("1,2,3,4,5") to obtain each number individually.</p>			


<!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->

<p class="buttonTitle"><strong>Recipe #3:</strong></p>
<p>
	This recipe shows how to build a string-based response on the server side and how to handle it on the client.
	Suppose we are updating the position of an enemy starship in a multiplayer action game
</p>

<pre class="codeBlockServer">
public void handleRequest(String cmd, String[] data, User u, int fromRoom)
{
	/*
	* enemyShip is an object whose id property is a string and posX, posY are integers.
	*/	
	String[] params = new String[]
			{
				"shipUpdate",
				enemyShip.getId(),
				String.valueOf(enemyShip.getPosX()),
				String.valueOf(enemyShip.getPosY())
			}
			
	LinkedList recipients = new LinkedList();
	recipients.add(u);
	
	sendResponse(params, -1, null, recipients);
}
</pre>
<p>Note that the first element in the array is the <em>command name</em> which is used to identify each request and response. This is a convention that should always be followed when using this separator based protocol.</p>
<p>This is how we can handle the server message on the client side, in Actionscript 3:</p>

<pre class="codeBlockClient">
public function onExtensionResponse(event:SFSEvent):void
{
	var params:Array = evt.params.dataObj
	
	/*
	* The first two indexes (0, 1) are reserved
	* 
	* param[0] = the "command" name sent from the server side
	* param[1] = the roomId
	*/
	var cmdName:String = params[0]
	var roomId:int = params [1]
	
	// This is the actual data 
	var shipId:String = params[2] 
	var shipPosX:int = params[3] 
	var shipPosY:int = params[4] 
}
</pre>

<p>Just pay attention that the first two parameter are always reserved to the <em>command name</em> and <em>room Id</em></p>
		
</p>


	
 <p>&nbsp;</p>
<hr width="99%" size="1" noshade>
 <table width="99%"  border="0" cellspacing="0" cellpadding="4">
  <tr>
    <td width="33%"><a href="mailer.htm" class="navLinks"></a> </td>
    <td width="34%" align="center"><a href="../../index.htm" target="_top" class="navLinks">doc index </a></td>
    <td width="33%" align="right">&nbsp;</td>
  </tr>
</table>

</body>
</html>
