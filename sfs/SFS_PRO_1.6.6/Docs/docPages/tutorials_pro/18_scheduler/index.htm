<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>SmartFoxServer: Actionscript 3 - Socket File Loader</title>
		<script language="javascript" src="../../../lib.js"></script>
		<link href="../../../main.css" rel="stylesheet" type="text/css">
	</head>

<body class="bodyStyle">
	<p class="title">8.18 Server side scheduler</p>
	
	<!-- ::::::: INTRO ::::::: -->
	<p>
		One of the problems that usually game developers face while programming on the server side is how to handle <strong>multiple timed events and delays</strong>.
		A typical example is implementing count-downs for multiple bombs that should explode, or doors that should open or close etc...
	</p>
	<p>
		Both Java and Actionscript offer a few solutions for handling time tasks (like the <strong>Timer</strong> class or <strong>setInterval</strong>) but none of them is really effective 
		when you need to handle many of these events. Additionally both mentioned tools run on top of Java threads and each instance will take 1 thread, leading to a possible performance
		degradation if the number of timed tasks grows in the hundreds.
	</p>
	<p>
		An example of this is when multiple threads are handling timed events in a Room-Level extension. Supposing we're using 4 threads for each room, you can imagine how many threads we
		would end up with once the number of Rooms grows. Even with only 100 rooms the JVM will have 400 threads to deal with, which can already tax the overall server performance.
	</p>
	
	<p class="subTitle">&raquo; The solution</p>
	<p>
		<strong>SmartFoxServer 1.6</strong> provides a specific set of classes that will help in handling multiple time events using a global class called <strong>Scheduler</strong>, which can handle
		as many events as you wish by using one single thread.
	</p>
	<p>
		Creating a new timed task requires the following steps:
		<ol>
			<li>
				Create a <strong>Task</strong> object, which can contain as many <strong>custom parameters</strong> as you wish describing the task to execute.
			</li>
			<li>
				Add the <strong>Task</strong> to the <strong>Scheduler</strong> specifying when this task should be executed.
			</li>
			<li>
				Create a <strong>callback handler</strong> (a method or function) which will be called by the <strong>Scheduler</strong> when it's time to execute the task
			</li>
		</ol>
	</p>
	
	<p class="subTitle">&raquo; An example</p>
	<p>
		The following is a simple Actionscript extension which demonstrates the usage of the <strong>Scheduler</strong> object. <br>
		The source of this example is provided with SmartFoxServer 1.6 in the <strong>sfsExtensions/</strong> folder
	</p>
	<pre class="serverCode">
// We import the correct java package
var _scheduler = Packages.it.gotoandplay.smartfoxserver.util.scheduling

// Global variable
var scheduler = null

function init()
{
	trace(">>>>> Scheduler Test running ...")

	scheduler = new _scheduler.Scheduler()

	// Start the scheduler
	scheduler.startService()

	/*
	* The Task object describes the task to be executed
	* You can pass any object in the constructor, containing any custom parameters
	*/
	var task1 = new _scheduler.Task( {name:"have breakfast"} )
	var task2 = new _scheduler.Task( {name:"play videogames"} )
	var task3 = new _scheduler.Task( {name:"work a bit", start:"14:00", end:"17:00"} )

	/*
	* This is the object that handles the call-backs generated by the Scheduler
	* when it's time to execute the task.
	*
	* The object must implement a method called doTask which receives a Task object
	* as the argument.
	*/
	var handlerObj = {}
	handlerObj.count = 0
	handlerObj.doTask = function(task)
	{
		trace("Executing task: " + task.id.name)

		if (task.id.name == "play videogames")
		{
			this.count++
			trace("count = " + this.count)

			if (this.count == 2)
			{
				task.active = false
				trace("End of loop")
			}
		}

		else if (task.id.name == "work a bit")
		{
			trace("Start at: " + task.id.start + ", End at: " + task.id.end)
		}
	}

	// We create the call-back handler
	var taskHandler = new _scheduler.ITaskHandler( handlerObj )

	/*
	* Here we add the tasks to the scheduler
	* specifiying the delay interval (2nd param) in seconds
	* if the task loops (3rd param)
	* and the call-back handler (4th param)
	*/
	scheduler.addScheduledTask(task1, 3, false, taskHandler)
	scheduler.addScheduledTask(task2, 5, true, taskHandler)
	scheduler.addScheduledTask(task3, 4, false, taskHandler)
}

function destroy()
{
	// This method should always be called to shut down the Scheduler
	scheduler.destroy(null)
}


function handleRequest(cmd, params, user, fromRoom)
{
 	//
}


function handleInternalEvent(evt)
{
	//	
}

function handleInternalRequest( params )
{
	//
}
	</pre>
	
	<p>
		While most of the code is self explanatory the portion of code where the callback handler is created requires a few comments.
		The handler should implement a Java interface, called <strong>ITaskHandler</strong>, which looks like this:
	</p>
	<pre class="serverCode">
public interface ITaskHandler
{
	public void doTask(Task task) throws Exception;
}
	</pre>
	<p>
		Even if you're not familiar with Java, &quot;implementing an interface&quot; simply means implementing the methods declared
		by the interface, so in this case <strong>doTask()</strong>.<br>
		In order to do this in Actionscript we simply create a generic object, attach a function to it called <strong>doTask()</strong>,
		and finally pass the object while constructing a new <strong>ITaskHandler</strong> object.
	</p>
	<p>
		For the complete documentation of the <strong>Scheduler</strong> classes please refer to the <a href="../../javadoc/index.html" target="_blank">javadoc</a>
	</p>
	
	<p>&nbsp;</p>
	
	<hr width="99%" size="1" noshade>
	<div align="center">
		<a href="../../../index.htm" target="_top" class="navLinks">doc index </a>
	</div>	
</body>
</html>
